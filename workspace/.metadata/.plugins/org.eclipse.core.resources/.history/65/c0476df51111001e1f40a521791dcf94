package com.abner.minhasfinancas.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfiguration {

	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

		return encoder;
	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		return http.authorizeHttpRequests(authorizeConfig -> {
			authorizeConfig.requestMatchers("/public").permitAll();
			authorizeConfig.requestMatchers("/logout").permitAll();
			authorizeConfig.anyRequest().authenticated();
		}).formLogin(Customizer.withDefaults()).build();
	}

	/*
	 * http .httpBasic() .and() .authorizeHttpRequests()
	 * .requestMatchers(HttpMethod.GET, "/parking-spot/**").permitAll()
	 * .requestMatchers(HttpMethod.POST, "/parking-spot").hasRole("USER")
	 * .requestMatchers(HttpMethod.DELETE, "/parking-spot/**").hasRole("ADMIN")
	 * .anyRequest().authenticated() .and() .csrf().disable();
	 * 
	 * return http.build();
	 */

}
